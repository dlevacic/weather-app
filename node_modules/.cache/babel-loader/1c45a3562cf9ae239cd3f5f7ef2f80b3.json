{"ast":null,"code":"var _jsxFileName = \"/Users/davidlee/play/weather-app/src/App.js\";\nimport React, { Component } from 'react';\nimport Header from './components/Header';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\nconst apiKey = \"b39bad181a5f7710d3d7bf7dc42995fb\";\nconst googleApiKey = \"AIzaSyBnQB4IGPDwpThK0ssNAoiD53QsU9QT1QY\";\nexport class App extends Component {\n  constructor(props) {\n    super();\n\n    this.getWeather = async e => {\n      e.preventDefault();\n      const city = e.target.elements.city.value;\n      const apiCall = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`);\n      const weather = await apiCall.json();\n\n      if (weather.name === city) {\n        this.setState({\n          temperature: weather.main.temp,\n          city: weather.name,\n          country: weather.sys.country,\n          humidity: weather.main.humidity,\n          description: weather.weather[0].description\n        });\n      } else {\n        alert('Your city is inccorect.');\n      }\n    };\n\n    this.state = {\n      temperature: '',\n      city: '',\n      country: '',\n      humidity: '',\n      description: '',\n      error: ''\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Form, {\n      getWeather: this.getWeather,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Weather, {\n      weather: this.state,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\nexport default App;","map":{"version":3,"sources":["/Users/davidlee/play/weather-app/src/App.js"],"names":["React","Component","Header","Form","Weather","apiKey","googleApiKey","App","constructor","props","getWeather","e","preventDefault","city","target","elements","value","apiCall","fetch","weather","json","name","setState","temperature","main","temp","country","sys","humidity","description","alert","state","error","render","textAlign"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AAGA,MAAMC,MAAM,GAAG,kCAAf;AACA,MAAMC,YAAY,GAAG,yCAArB;AAEA,OAAO,MAAMC,GAAN,SAAkBN,SAAlB,CAA4B;AACjCO,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB;;AADiB,SAYnBC,UAZmB,GAYN,MAAOC,CAAP,IAAa;AACxBA,MAAAA,CAAC,CAACC,cAAF;AACA,YAAMC,IAAI,GAAGF,CAAC,CAACG,MAAF,CAASC,QAAT,CAAkBF,IAAlB,CAAuBG,KAApC;AAEA,YAAMC,OAAO,GAAG,MAAMC,KAAK,CAAE,oDAAmDL,IAAK,UAASR,MAAO,eAA1E,CAA3B;AACA,YAAMc,OAAO,GAAG,MAAMF,OAAO,CAACG,IAAR,EAAtB;;AAEA,UAAID,OAAO,CAACE,IAAR,KAAiBR,IAArB,EAA2B;AACzB,aAAKS,QAAL,CAAc;AACZC,UAAAA,WAAW,EAAEJ,OAAO,CAACK,IAAR,CAAaC,IADd;AAEZZ,UAAAA,IAAI,EAAEM,OAAO,CAACE,IAFF;AAGZK,UAAAA,OAAO,EAAEP,OAAO,CAACQ,GAAR,CAAYD,OAHT;AAIZE,UAAAA,QAAQ,EAAET,OAAO,CAACK,IAAR,CAAaI,QAJX;AAKZC,UAAAA,WAAW,EAAEV,OAAO,CAACA,OAAR,CAAgB,CAAhB,EAAmBU;AALpB,SAAd;AAOD,OARD,MAQO;AACLC,QAAAA,KAAK,CAAC,yBAAD,CAAL;AACD;AACF,KA9BkB;;AAEjB,SAAKC,KAAL,GAAa;AACXR,MAAAA,WAAW,EAAE,EADF;AAEXV,MAAAA,IAAI,EAAE,EAFK;AAGXa,MAAAA,OAAO,EAAE,EAHE;AAIXE,MAAAA,QAAQ,EAAE,EAJC;AAKXC,MAAAA,WAAW,EAAE,EALF;AAMXG,MAAAA,KAAK,EAAE;AANI,KAAb;AAQD;;AAuBDC,EAAAA,MAAM,GAAG;AAEP,wBACE;AAAK,MAAA,KAAK,EAAE;AAACC,QAAAA,SAAS,EAAE;AAAZ,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,IAAD;AAAM,MAAA,UAAU,EAAE,KAAKxB,UAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAGE,oBAAC,OAAD;AAAS,MAAA,OAAO,EAAE,KAAKqB,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CADF;AAQD;;AA5CgC;AA+CnC,eAAexB,GAAf","sourcesContent":["import React, { Component } from 'react'\nimport Header from './components/Header'\nimport Form from './components/Form'\nimport Weather from './components/Weather'\n\n\nconst apiKey = \"b39bad181a5f7710d3d7bf7dc42995fb\"\nconst googleApiKey = \"AIzaSyBnQB4IGPDwpThK0ssNAoiD53QsU9QT1QY\"\n\nexport class App extends Component {\n  constructor(props) {\n    super()\n    this.state = {\n      temperature: '',\n      city: '',\n      country: '',\n      humidity: '',\n      description: '',\n      error: ''\n    }\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault()\n    const city = e.target.elements.city.value\n\n    const apiCall = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`)\n    const weather = await apiCall.json()\n    \n    if (weather.name === city) {\n      this.setState({\n        temperature: weather.main.temp,\n        city: weather.name,\n        country: weather.sys.country,\n        humidity: weather.main.humidity,\n        description: weather.weather[0].description,\n      }) \n    } else {\n      alert('Your city is inccorect.')\n    }\n  }\n\n\n  render() {\n    \n    return (\n      <div style={{textAlign: 'center'}}>\n        <Header />\n        <Form getWeather={this.getWeather}/>\n        <Weather weather={this.state}/>\n        \n      </div>\n    )\n  }\n}\n\nexport default App\n\n"]},"metadata":{},"sourceType":"module"}